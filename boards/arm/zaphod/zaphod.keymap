/*
 * Copyright (c) 2021 Pete Johanson
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define NAV_L 1
#define OTH_L 2
#define NUM_L 3
#define SYM_L 4
#define MED_L 5
#define FUN_L 6
#define MOD_L 7

// Using layer taps on thumbs, having quick tap as well helps w/ repeating space/backspace
//&lt { quick_tap_ms = <200>; };
// This makes interspersing numbers and spaces difficult, so trying without for now.

/ {
    combos {
        compatible = "zmk,combos";

        med_mo {
	    timeout-ms = <50>;
            key-positions = <30 31>;
            bindings = <&mo OTH_L>;
        };

        fn_mo {
	    timeout-ms = <50>;
            key-positions = <32 33>;
            bindings = <&mo FUN_L>;
        };

        caps {
	    timeout-ms = <10>;
            key-positions = <30 33>;
            bindings = <&kp CAPS>;
        };

        escape {
	    timeout-ms = <50>;
            key-positions = <11 13>;
            bindings = <&kp ESC>;
        };

        enter {
	    timeout-ms = <50>;
            key-positions = <16 18>;
            bindings = <&kp RET>;
        };

        lshft {
            timeout-ms = <50>;
            key-positions = <10 31>;
            bindings = <&skq LSHFT>;
        };

        lctrl {
            timeout-ms = <50>;
            key-positions = <11 31>;
            bindings = <&sk LCTRL>;
        };

        lalt {
            timeout-ms = <50>;
            key-positions = <12 31>;
            bindings = <&sk LALT>;
        };

        lgui {
            timeout-ms = <50>;
            key-positions = <13 31>;
            bindings = <&sk LGUI>;
        };

        rshft {
            timeout-ms = <50>;
            key-positions = <19 32>;
            bindings = <&skq RSHFT>;
        };

        rctrl {
            timeout-ms = <50>;
            key-positions = <18 32>;
            bindings = <&sk RCTRL>;
        };

        ralt {
            timeout-ms = <50>;
            key-positions = <17 32>;
            bindings = <&sk RALT>;
        };

        rgui {
            timeout-ms = <50>;
            key-positions = <16 32>;
            bindings = <&sk RGUI>;
        };
    };

    behaviors {
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "homerow mods";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        skq: sticky_key_quick_release {
            compatible = "zmk,behavior-sticky-key";
            label = "STICKY_KEY_QUICK_RELEASE";
            #binding-cells = <1>;
            bindings = <&kp>;
            release-after-ms = <1000>;
            quick-release;
        };

        hs: hold_tap_sticky {
            compatible = "zmk,behavior-hold-tap";
            label = "hold tap sticky";
            #binding-cells = <2>;
            tapping_term_ms = <200>;
            flavor = "balanced";
            bindings = <&kp>, <&sl>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            label = "Base";
            bindings = <
                &kp Q        &kp W      &kp E       &kp R              &kp T          &kp Y            &kp U          &kp I            &kp O        &kp P
                &kp A        &kp S      &kp D       &kp F              &kp G          &kp H            &kp J          &kp K            &kp L        &kp SEMI
                &kp Z        &kp X      &kp C       &kp V              &kp B          &kp N            &kp M          &kp COMMA        &kp DOT      &kp QUOT
                                                    &sk LC(LGUI)       &lt NAV_L BKSP &lt NUM_L SPACE  &sk LSHFT
            >;
        };

        nav_layer {
            label = "Nav";
            bindings = <
                &kp GRAVE          &kp C_MUTE        &trans        &trans          &kp C_PLAY_PAUSE &kp C_PLAY_PAUSE &kp LBRC       &kp RBRC      &kp LBKT      &kp RBKT
                &kp C_BRI_UP       &kp C_VOL_UP      &kp HOME      &kp PG_UP       &kp LC(LS(TAB))  &kp LARW         &kp DARW       &kp UARW      &kp RARW      &kp PIPE
                &kp C_BRI_DN       &kp C_VOL_DN      &kp END       &kp PG_DN       &kp LC(TAB)      &kp HOME         &kp END        &kp LPAR      &kp RPAR      &kp QMARK
                                                                   &trans          &trans           &kp TAB          &kp DEL
            >;
        };

        other_layer {
            label = "Other";
            bindings = <
                &trans	     &trans       &trans       &trans          &trans       &trans           &trans         &trans       &trans       &trans
                &trans       &trans       &trans       &trans          &trans       &trans           &trans         &trans       &trans       &trans
                &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3    &bt BT_SEL 4 &trans           &bt BT_CLR     &trans       &trans       &trans
                                                       &trans          &trans       &trans           &trans
            >;
        };

        num_layer {
            label = "Num";
            bindings = <
                &kp EXCL   &kp AT         &kp HASH       &kp DLLR        &kp PRCNT     &kp CARET       &kp AMPS        &kp STAR    &kp LPAR   &kp RPAR
                &kp N1     &kp N2         &kp N3         &kp N4          &kp N5        &kp N6          &kp N7          &kp N8      &kp N9     &kp N0
                &kp BSLH   &kp TILDE      &kp EQUAL      &kp MINUS       &kp PLUS      &kp UNDER       &kp SPACE       &trans      &trans     &kp SLASH
                                                         &kp SPACE       &trans        &trans          &trans
            >;
        };

        sym_layer {
            label = "Sym";
            bindings = <
                &kp LBRC     &kp LS(N7)  &kp LS(N8)  &kp LS(N9) &kp RBRC        &trans &trans   &trans    &trans    &trans
                &kp COLON    &kp LS(N4)  &kp LS(N5)  &kp LS(N6) &kp PLUS        &trans &trans   &trans    &trans    &trans
                &kp TILDE    &kp LS(N1)  &kp LS(N2)  &kp LS(N3) &kp LS(BSLH)    &trans &trans   &trans    &trans    &trans
                                                     &kp LS(N0) &kp UNDER       &trans &trans
            >;
        };

        media_layer {
            label = "Media";
            bindings = <
                &trans	   &trans     &trans      &trans          &trans       &trans           &trans         &trans       &trans       &trans
                &trans     &trans     &trans      &trans          &trans       &trans           &kp C_PREV     &kp C_VOL_DN &kp C_VOL_UP &kp C_NEXT
                &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans       &trans       &trans
                                                  &trans          &trans       &kp C_STOP       &kp C_PLAY_PAUSE
            >;
        };

        fun_layer {
            label = "Fun";
            bindings = <
                &trans       &trans       &trans      &trans     &trans            &trans          &trans         &trans      &kp INS        &kp SLCK
                &kp F1       &kp F2       &kp F3      &kp F4     &kp F5            &kp F6          &kp F7         &kp F8      &kp F9         &kp F10
                &kp F11      &kp F12      &trans      &trans     &trans            &trans          &trans         &trans      &kp PSCRN      &kp PAUSE_BREAK
                                                      &trans     &trans            &trans          &trans
            >;
        };

        mod_layer {
            label = "Mod";
            bindings = <
                &trans	   &trans     &trans      &trans          &trans       &trans           &trans         &trans       &trans       &trans
                &sk  LSHFT &sk  LCTRL &sk  LALT   &sk  LGUI       &trans       &trans           &sk  RGUI      &sk  RALT    &sk  RCTRL   &sk  RSHFT
                &trans     &trans     &trans      &trans          &trans       &trans           &trans         &trans       &trans       &trans
                                                  &sl OTH_L       &trans       &trans           &sl FUN_L
            >;
        };
    };
};

